<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AnalyzerDescription" xml:space="preserve">
    <value>Type names should be all uppercase.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="AnalyzerMessageFormat" xml:space="preserve">
    <value>Type name '{0}' contains lowercase letters</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="AnalyzerTitle" xml:space="preserve">
    <value>Type name contains lowercase letters</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="EFLINQ001_DESC" xml:space="preserve">
    <value>Read-Only properties should not participate in IQueryable LINQ expressions (where clauses, joins or projections). Such properties will cause the EF LINQ provider to throw a NotSupportedException as they are not translatable to SQL</value>
  </data>
  <data name="EFLINQ001_MSGFORMAT" xml:space="preserve">
    <value>Property '{0}' in type '{1}' not translatable in LINQ to Entities</value>
  </data>
  <data name="EFLINQ001_TITLE" xml:space="preserve">
    <value>Read-Only EF code first property</value>
  </data>
  <data name="EFLINQ002_DESC" xml:space="preserve">
    <value>Read-Only properties are not translatable to SQL in LINQ to Entities and will cause a NotSupportedException to be thrown by a EF LINQ provider</value>
  </data>
  <data name="EFLINQ002_MSGFORMAT" xml:space="preserve">
    <value>Read-Only property '{0}' of type '{1}' used in LINQ to Entities expression</value>
  </data>
  <data name="EFLINQ002_TITLE" xml:space="preserve">
    <value>Read-Only property used within LINQ to Entities expression</value>
  </data>
  <data name="EFLINQ003_DESC" xml:space="preserve">
    <value>Only a specific subset of methods are allowed within a LINQ to Entities expression</value>
  </data>
  <data name="EFLINQ003_MSGFORMAT" xml:space="preserve">
    <value>Static method '{0}' cannot be used within a LINQ to Entities expression</value>
  </data>
  <data name="EFLINQ003_TITLE" xml:space="preserve">
    <value>Invalid static method call within LINQ to Entities expression</value>
  </data>
  <data name="EFLINQ004_DESC" xml:space="preserve">
    <value>Only a specific subset of methods are allowed within a LINQ to Entities expression</value>
  </data>
  <data name="EFLINQ004_MSGFORMAT" xml:space="preserve">
    <value>Method '{0}' cannot be used within a LINQ to Entities expression</value>
  </data>
  <data name="EFLINQ004_TITLE" xml:space="preserve">
    <value>Invalid method call on instance within LINQ to Entities expression</value>
  </data>
</root>