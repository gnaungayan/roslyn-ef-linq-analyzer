using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
using System.Data.Entity;
using System.Data.Entity.Spatial;

namespace ConsoleApplication1
{
    public class MyContext : DbContext
    {
        public DbSet<Thing> Things { get; set; }
    }

    public class Thing
    {
        public string Foo { get; set; }
        public DateTime At { get; set; }
        public double ADouble { get; set; }
        public DbGeometry Geom { get; set; }
        public DbGeography Geog { get; set; }
    }

    class Program
    {
        static bool FooIsBar(string foo, string bar)
        {
            return foo == bar;
        }

        public static void Main(string[] args)
        {
            using (var context = new MyContext())
            {
                var items = context.Things.Select(t => new {
                    t.Foo,
                    t.At,
                    t.ADouble,
                    t.Geom,
                    t.Geog,
                    AbsResult = Math.Abs(t.ADouble),
                    CeilingResult = Math.Ceiling(t.ADouble),
                    FloorResult = Math.Floor(t.ADouble),
                    //TODO: Valid Power() call
                    RoundResult = Math.Round(t.ADouble),
                    TruncateResult = Math.Truncate(t.ADouble),
                    //TODO: valid Concat() call
                    ContainsResult = t.Foo.Contains("bar"),
                    EndsWithResult = t.Foo.EndsWith("bar"),
                    IndexOfResult = t.Foo.IndexOf("bar"),
                    //TODO: valid Left() call
                    LengthResult = t.Foo.Length,
                    //TODO: valid LTrim() call
                    ReplaceResult = t.Foo.Replace("Foo", "Bar"),
                    ReverseResult = t.Foo.Reverse(),
                    //TODO: valid Right() call
                    //TODO: valid RTrim() call
                    SubstringResult = t.Foo.Substring(0),
                    SubstringResult2 = t.Foo.Substring(0, 2),
                    StartsWithResult = t.Foo.StartsWith("Bar"),
                    ToLowerResult = t.Foo.ToLower(),
                    ToUpperResult = t.Foo.ToUpper(),
                    TrimResult = t.Foo.Trim(),
                    //TODO: valid AddNanoseconds() call
                    //TODO: valid AddMicroseconds() call
                    AddMillisecondsResult = t.At.AddMilliseconds(1),
                    AddSecondsResult = t.At.AddSeconds(1),
                    AddMinutesResult = t.At.AddMinutes(1),
                    AddHoursResult = t.At.AddHours(1),
                    AddDaysResult = t.At.AddDays(1),
                    AddMonthsResult = t.At.AddMonths(1),
                    AddYearsResult = t.At.AddYears(1),
                    //TODO: valid CreateDateTime() call
                    //TODO: valid CreateDateTimeOffset() call
                    //TODO: valid CreateTime() call
                    //TODO: valid CurrentDateTime() call
                    //TODO: valid CurrentDateTimeOffset() call
                    //TODO: valid CurrentUtcDateTime() call
                    //TODO: valid Day() call
                    //TODO: valid DayOfYear() call
                    //TODO: valid DiffNanoseconds() call
                    //TODO: valid DiffMilliseconds() call
                    //TODO: valid DiffMicroseconds() call
                    //TODO: valid DiffSeconds() call
                    //TODO: valid DiffMinutes() call
                    //TODO: valid DiffHours() call
                    //TODO: valid DiffDays() call
                    //TODO: valid DiffMonths() call
                    //TODO: valid DiffYears() call
                    //TODO: valid GetTotalOffsetMinutes() call
                    //TODO: valid Hour() call
                    //TODO: valid Millisecond() call
                    //TODO: valid Minute() call
                    //TODO: valid Month() call
                    //TODO: valid Second() call
                    //TODO: valid TruncateTime() call
                    //TODO: valid Year() call
                    //TODO: valid BitWiseAnd() call
                    //TODO: valid BitWiseNot() call
                    //TODO: valid BitWiseOr() call
                    //TODO: valid BitWiseXor() call
                    //TODO: valid Area() call
                    //TODO: valid AsBinary() call
                    //TODO: valid AsGml() call
                    //TODO: valid AsText() call
                    //TODO: valid Centroid() call
                    //TODO: valid CoordinateSystemId()
                    //TODO: valid Distance() call
                    //TODO: valid Elevation() call
                    //TODO: valid EndPoint() call
                    //TODO: valid ExteriorRing() call
                    //TODO: valid GeographyCollectionFromBinary() call
                    //TODO: valid GeographyCollectionFromText() call
                    //TODO: valid GeographyFromBinary() call
                    //TODO: valid GeographyFromGml() call
                    //TODO: valid GeographyFromText() call
                    //TODO: valid GeographyLineFromBinary() call
                    //TODO: valid GeographyLineFromText() call
                    //TODO: valid GeographyMultiLineFromBinary() call
                    //TODO: valid GeographyMultiLineFromText() call
                    //TODO: valid GeographyMultiPointFromBinary() call
                    //TODO: valid GeographyMultiPointFromText() call
                    //TODO: valid GeographyMultiPolygonFromBinary() call
                    //TODO: valid GeographyMultiPolygonFromText() call
                    //TODO: valid GeographyPointFromBinary() call
                    //TODO: valid GeographyPointFromText() call
                    //TODO: valid GeographyPolygonFromBinary() call
                    //TODO: valid GeographyPolygonFromText() call
                    //TODO: valid GeometryCollectionFromBinary() call
                    //TODO: valid GeometryCollectionFromText() call
                    //TODO: valid GeometryFromBinary() call
                    //TODO: valid GeometryFromGml() call
                    //TODO: valid GeometryFromText() call
                    //TODO: valid GeometryLineFromBinary() call
                    //TODO: valid GeometryLineFromText() call
                    //TODO: valid GeometryMultiLineFromBinary() call
                    //TODO: valid GeometryMultiLineFromText() call
                    //TODO: valid GeometryMultiPointFromBinary() call
                    //TODO: valid GeometryMultiPointFromText() call
                    //TODO: valid GeometryMultiPolygonFromBinary() call
                    //TODO: valid GeometryMultiPolygonFromText() call
                    //TODO: valid GeometryPointFromBinary() call
                    //TODO: valid GeometryPointFromText() call
                    //TODO: valid GeometryPolygonFromBinary() call
                    //TODO: valid GeometryPolygonFromText() call
                    //TODO: valid InteriorRingAt() call
                    //TODO: valid InteriorRingCount() call
                    //TODO: valid IsClosedSpatial() call
                    //TODO: valid IsEmptySpatial() call
                    //TODO: valid IsRing() call
                    //TODO: valid IsSimpleGeometry() call
                    //TODO: valid IsValidGeometry() call
                    //TODO: valid Latitude() call
                    //TODO: valid Longitude() call
                    //TODO: valid Measure() call
                    //TODO: valid PointAt() call
                    //TODO: valid PointCount() call
                    //TODO: valid PointOnSurface() call
                    //TODO: valid SpatialBoundary() call
                    //TODO: valid SpatialBuffer() call
                    //TODO: valid SpatialContains() call
                    //TODO: valid SpatialConvexHull() call
                    //TODO: valid SpatialCrosses() call
                    //TODO: valid SpatialDifference() call
                    //TODO: valid SpatialDimension() call
                    //TODO: valid SpatialDisjoint() call
                    //TODO: valid SpatialElementAt() call
                    //TODO: valid SpatialElementCount() call
                    //TODO: valid SpatialEnvelope() call
                    //TODO: valid SpatialEquals() call
                    //TODO: valid SpatialIntersection() call
                    //TODO: valid SpatialIntersects() call
                    //TODO: valid SpatialLength() call
                    //TODO: valid SpatialOverlaps() call
                    //TODO: valid SpatialRelate() call
                    //TODO: valid SpatialSymmetricDifference() call
                    //TODO: valid SpatialTouches() call
                    //TODO: valid SpatialTypeName() call
                    //TODO: valid SpatialUnion() call
                    //TODO: valid SpatialWithin() call
                    //TODO: valid StartPoint() call
                    //TODO: valid XCoordinate() call
                    //TODO: valid YCooridnate() call
                    NewGuidResult = Guid.NewGuid()
                });
            }
        }
    }
}